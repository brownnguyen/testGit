{"ast":null,"code":"import { ADD_CART, CART, REMOVE__COURSE, COURSE__DETAIL, DETAIL } from \"../Action/Type\";\nconst initialState = {\n  cart: [],\n  courseDetail: {}\n};\nexport const CartReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CART:\n      {\n        state.cart = payload;\n        return { ...state\n        };\n      }\n\n    case ADD_CART:\n      {\n        let item = state.cart.find(sp => sp.id === payload.id);\n        console.log(item);\n\n        if (item) {\n          return { ...state\n          };\n        } else {\n          let cartUpdate = [...state.cart, payload];\n          state.cart = cartUpdate;\n          localStorage.setItem('cart', JSON.stringify(state.cart));\n          return { ...state\n          };\n        }\n      }\n\n    case REMOVE__COURSE:\n      {\n        let index = state.cart.findIndex(item => item.id === payload);\n        let removeCart = [...state.cart];\n        console.log(index, removeCart);\n\n        if (index !== -1) {\n          removeCart.splice(index, 1);\n          state.cart = removeCart;\n        }\n\n        localStorage.setItem('cart', JSON.stringify(state.cart));\n        return { ...state\n        };\n      }\n\n    case COURSE__DETAIL:\n      {\n        let detail = { ...state.courseDetail\n        };\n        detail = payload;\n        state.courseDetail = detail;\n        localStorage.setItem('detail', JSON.stringify(state.courseDetail));\n        return { ...state\n        };\n      }\n\n    case DETAIL:\n      {\n        state.courseDetail = payload;\n        return { ...state\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["C:/Users/Brown/Desktop/redo/07/src/Redux/CartReducer.js"],"names":["ADD_CART","CART","REMOVE__COURSE","COURSE__DETAIL","DETAIL","initialState","cart","courseDetail","CartReducer","state","action","type","payload","item","find","sp","id","console","log","cartUpdate","localStorage","setItem","JSON","stringify","index","findIndex","removeCart","splice","detail"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,MAAzD,QAAuE,gBAAvE;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,YAAY,EAAG;AAFE,CAArB;AAIA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACI,SAAKV,IAAL;AACI;AACIQ,QAAAA,KAAK,CAACH,IAAN,GAAaM,OAAb;AACA,eAAO,EAAE,GAAGH;AAAL,SAAP;AACH;;AACL,SAAKT,QAAL;AACI;AACI,YAAIa,IAAI,GAAIJ,KAAK,CAACH,IAAN,CAAWQ,IAAX,CAAgBC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUJ,OAAO,CAACI,EAAxC,CAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;;AACA,YAAIA,IAAJ,EAAU;AACN,iBAAO,EAAE,GAAGJ;AAAL,WAAP;AACH,SAFD,MAGK;AACD,cAAIU,UAAU,GAAG,CAAC,GAAGV,KAAK,CAACH,IAAV,EAAgBM,OAAhB,CAAjB;AACAH,UAAAA,KAAK,CAACH,IAAN,GAAaa,UAAb;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAed,KAAK,CAACH,IAArB,CAA7B;AACA,iBAAO,EAAE,GAAGG;AAAL,WAAP;AACH;AACJ;;AACL,SAAKP,cAAL;AACI;AACI,YAAIsB,KAAK,GAAGf,KAAK,CAACH,IAAN,CAAWmB,SAAX,CAAqBZ,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYJ,OAAzC,CAAZ;AACA,YAAIc,UAAU,GAAG,CAAC,GAAGjB,KAAK,CAACH,IAAV,CAAjB;AAEAW,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,EAAmBE,UAAnB;;AACA,YAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdE,UAAAA,UAAU,CAACC,MAAX,CAAkBH,KAAlB,EAAyB,CAAzB;AACAf,UAAAA,KAAK,CAACH,IAAN,GAAaoB,UAAb;AACH;;AACDN,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAed,KAAK,CAACH,IAArB,CAA7B;AACA,eAAO,EAAE,GAAGG;AAAL,SAAP;AACH;;AACD,SAAKN,cAAL;AACI;AACI,YAAIyB,MAAM,GAAG,EAAC,GAAGnB,KAAK,CAACF;AAAV,SAAb;AACAqB,QAAAA,MAAM,GAAGhB,OAAT;AACAH,QAAAA,KAAK,CAACF,YAAN,GAAqBqB,MAArB;AACAR,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAed,KAAK,CAACF,YAArB,CAA/B;AACA,eAAO,EAAC,GAAGE;AAAJ,SAAP;AACH;;AACL,SAAKL,MAAL;AACI;AACIK,QAAAA,KAAK,CAACF,YAAN,GAAqBK,OAArB;AACA,eAAO,EAAC,GAAGH;AAAJ,SAAP;AACH;;AACT;AACI,aAAO,EAAE,GAAGA;AAAL,OAAP;AA/CR;AAiDH,CAnDM","sourcesContent":["import { ADD_CART, CART, REMOVE__COURSE, COURSE__DETAIL, DETAIL } from \"../Action/Type\"\r\n\r\nconst initialState = {\r\n    cart: [],\r\n    courseDetail : {}\r\n}\r\nexport const CartReducer = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case CART:\r\n            {\r\n                state.cart = payload;\r\n                return { ...state }\r\n            }\r\n        case ADD_CART:\r\n            {\r\n                let item = (state.cart.find(sp => sp.id === payload.id))\r\n                console.log(item)\r\n                if (item) {\r\n                    return { ...state };\r\n                }\r\n                else {\r\n                    let cartUpdate = [...state.cart, payload];\r\n                    state.cart = cartUpdate;\r\n                    localStorage.setItem('cart', JSON.stringify(state.cart))\r\n                    return { ...state }\r\n                }\r\n            }\r\n        case REMOVE__COURSE:\r\n            {\r\n                let index = state.cart.findIndex(item => item.id === payload);\r\n                let removeCart = [...state.cart];\r\n\r\n                console.log(index, removeCart);\r\n                if (index !== -1) {\r\n                    removeCart.splice(index, 1);\r\n                    state.cart = removeCart;\r\n                }\r\n                localStorage.setItem('cart', JSON.stringify(state.cart))\r\n                return { ...state }\r\n            }\r\n            case COURSE__DETAIL:\r\n                {\r\n                    let detail = {...state.courseDetail};\r\n                    detail = payload;\r\n                    state.courseDetail = detail;\r\n                    localStorage.setItem('detail', JSON.stringify(state.courseDetail))\r\n                    return {...state}\r\n                }\r\n            case DETAIL:\r\n                {\r\n                    state.courseDetail = payload;\r\n                    return {...state}\r\n                }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}